// Package planet provides a client for the "planet" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package planet

import (
	"github.com/aviate-labs/agent-go"
	"github.com/aviate-labs/agent-go/candid/idl"
	"github.com/aviate-labs/agent-go/principal"
)

type TransferError struct {
	BadBurn *struct {
		MinBurnAmount idl.Nat `ic:"min_burn_amount"`
	} `ic:"BadBurn,variant"`
	BadFee *struct {
		ExpectedFee idl.Nat `ic:"expected_fee"`
	} `ic:"BadFee,variant"`
	CreatedInFuture *struct {
		LedgerTime uint64 `ic:"ledger_time"`
	} `ic:"CreatedInFuture,variant"`
	Duplicate *struct {
		DuplicateOf idl.Nat `ic:"duplicate_of"`
	} `ic:"Duplicate,variant"`
	GenericError *struct {
		ErrorCode idl.Nat `ic:"error_code"`
		Message   string  `ic:"message"`
	} `ic:"GenericError,variant"`
	InsufficientFunds *struct {
		Balance idl.Nat `ic:"balance"`
	} `ic:"InsufficientFunds,variant"`
	TemporarilyUnavailable *idl.Null `ic:"TemporarilyUnavailable,variant"`
	TooOld                 *idl.Null `ic:"TooOld,variant"`
}

type TransferArgs struct {
	Amount uint64 `ic:"amount"`
	Memo   uint64 `ic:"memo"`
	To     []byte `ic:"to"`
}

type Tokens struct {
	E8s uint64 `ic:"e8s"`
}

type SubcribeType struct {
	Day1000   *idl.Null `ic:"Day1000,variant"`
	Day180    *idl.Null `ic:"Day180,variant"`
	Day30     *idl.Null `ic:"Day30,variant"`
	Day360    *idl.Null `ic:"Day360,variant"`
	Day90     *idl.Null `ic:"Day90,variant"`
	Free      *idl.Null `ic:"Free,variant"`
	Permanent *idl.Null `ic:"Permanent,variant"`
}

type SubcribePrice struct {
	Price   idl.Nat      `ic:"price"`
	SubType SubcribeType `ic:"subType"`
}

type Result struct {
	Err *TransferError `ic:"Err,variant"`
	Ok  *idl.Nat       `ic:"Ok,variant"`
}

type QuerySubcriberResp struct {
	Data    []QuerySubcriber `ic:"data"`
	Hasmore bool             `ic:"hasmore"`
	Page    idl.Nat          `ic:"page"`
	Total   idl.Int          `ic:"total"`
}

type QuerySubcriber struct {
	Created    idl.Int             `ic:"created"`
	ExpireTime idl.Int             `ic:"expireTime"`
	Isblack    bool                `ic:"isblack"`
	Pid        principal.Principal `ic:"pid"`
	SubType    SubcribeType        `ic:"subType"`
}

type QuerySort struct {
	TimeAsc  *idl.Null `ic:"TimeAsc,variant"`
	TimeDesc *idl.Null `ic:"TimeDesc,variant"`
}

type QuerySelfSubscriber struct {
	Data    *QuerySubcriber `ic:"data,omitempty"`
	Isblack bool            `ic:"isblack"`
}

type QueryOrderResp struct {
	Data    []QueryOrder `ic:"data"`
	Hasmore bool         `ic:"hasmore"`
	Page    idl.Nat      `ic:"page"`
	Total   idl.Int      `ic:"total"`
}

type QueryOrder struct {
	Amount       uint64              `ic:"amount"`
	AmountPaid   uint64              `ic:"amountPaid"`
	CreatedTime  idl.Int             `ic:"createdTime"`
	From         principal.Principal `ic:"from"`
	Id           uint64              `ic:"id"`
	Paytype      PayType             `ic:"paytype"`
	SharedTime   *idl.Int            `ic:"sharedTime,omitempty"`
	Source       string              `ic:"source"`
	Status       PayStatus           `ic:"status"`
	To           []byte              `ic:"to"`
	Token        string              `ic:"token"`
	VerifiedTime *idl.Int            `ic:"verifiedTime,omitempty"`
}

type QueryDetailResp struct {
	Err *string `ic:"Err,variant"`
	Ok  *struct {
		Article QueryArticle `ic:"article"`
		Content string       `ic:"content"`
	} `ic:"Ok,variant"`
}

type QueryCommonSubscriber struct {
	Data         *QuerySubcriber `ic:"data,omitempty"`
	Issubscriber bool            `ic:"issubscriber"`
}

type QueryCommonReq struct {
	Page idl.Nat   `ic:"page"`
	Size idl.Nat   `ic:"size"`
	Sort QuerySort `ic:"sort"`
}

type QueryCommentResp struct {
	Data    []QueryComment `ic:"data"`
	Hasmore bool           `ic:"hasmore"`
	Page    idl.Nat        `ic:"page"`
	Total   idl.Int        `ic:"total"`
}

type QueryCommentReq struct {
	Aid  string               `ic:"aid"`
	Page idl.Nat              `ic:"page"`
	Pid  *principal.Principal `ic:"pid,omitempty"`
	Size idl.Nat              `ic:"size"`
	Sort QuerySort            `ic:"sort"`
}

type QueryComment struct {
	Aid     string              `ic:"aid"`
	Content string              `ic:"content"`
	Created idl.Int             `ic:"created"`
	Id      idl.Nat             `ic:"id"`
	Like    idl.Nat             `ic:"like"`
	Pid     principal.Principal `ic:"pid"`
	Reply   *QueryComment       `ic:"reply,omitempty"`
	Status  CommentStatus       `ic:"status"`
}

type QueryCategory struct {
	Children []QueryCategory `ic:"children"`
	Id       idl.Nat         `ic:"id"`
	Name     string          `ic:"name"`
}

type QueryBlackUserResp struct {
	Data    []BlackUser `ic:"data"`
	Hasmore bool        `ic:"hasmore"`
	Page    idl.Nat     `ic:"page"`
	Total   idl.Int     `ic:"total"`
}

type QueryAwardResp struct {
	Data    []QueryAward `ic:"data"`
	Hasmore bool         `ic:"hasmore"`
	Page    idl.Nat      `ic:"page"`
	Total   idl.Int      `ic:"total"`
}

type QueryAwardReq struct {
	Aid  string    `ic:"aid"`
	Page idl.Nat   `ic:"page"`
	Size idl.Nat   `ic:"size"`
	Sort QuerySort `ic:"sort"`
}

type QueryAward struct {
	Aid     string              `ic:"aid"`
	Amount  uint64              `ic:"amount"`
	Created idl.Int             `ic:"created"`
	From    principal.Principal `ic:"from"`
	Id      uint64              `ic:"id"`
	Token   string              `ic:"token"`
}

type QueryArticleResp struct {
	Data    []QueryArticle `ic:"data"`
	Hasmore bool           `ic:"hasmore"`
	Page    idl.Nat        `ic:"page"`
	Stat    ArticleStat    `ic:"stat"`
	Total   idl.Int        `ic:"total"`
}

type QueryArticleReq struct {
	Atype   *ArticleType   `ic:"atype,omitempty"`
	Cate    idl.Nat        `ic:"cate"`
	Page    idl.Nat        `ic:"page"`
	Search  string         `ic:"search"`
	Size    idl.Nat        `ic:"size"`
	Sort    QuerySort      `ic:"sort"`
	Status  *ArticleStatus `ic:"status,omitempty"`
	Subcate idl.Nat        `ic:"subcate"`
}

type QueryArticle struct {
	Abstract     string              `ic:"abstract"`
	AllowComment bool                `ic:"allowComment"`
	Atype        ArticleType         `ic:"atype"`
	Author       principal.Principal `ic:"author"`
	Cate         idl.Nat             `ic:"cate"`
	Comment      idl.Nat             `ic:"comment"`
	CommentNew   idl.Nat             `ic:"commentNew"`
	CommentTotal idl.Nat             `ic:"commentTotal"`
	Copyright    *string             `ic:"copyright,omitempty"`
	Created      idl.Int             `ic:"created"`
	Fromurl      string              `ic:"fromurl"`
	Id           string              `ic:"id"`
	Like         idl.Nat             `ic:"like"`
	Original     bool                `ic:"original"`
	Status       ArticleStatus       `ic:"status"`
	Subcate      idl.Nat             `ic:"subcate"`
	Tags         []string            `ic:"tags"`
	Thumb        string              `ic:"thumb"`
	Title        string              `ic:"title"`
	Toped        idl.Int             `ic:"toped"`
	Unlike       idl.Nat             `ic:"unlike"`
	Updated      idl.Int             `ic:"updated"`
	View         uint64              `ic:"view"`
}

type PlanetInfo struct {
	Article         idl.Nat               `ic:"article"`
	ArticleStat     ArticleStat           `ic:"articleStat"`
	Avatar          string                `ic:"avatar"`
	Canindex        bool                  `ic:"canindex"`
	Canister        principal.Principal   `ic:"canister"`
	Categorys       []QueryCategory       `ic:"categorys"`
	Cover           string                `ic:"cover"`
	Created         idl.Int               `ic:"created"`
	Desc            string                `ic:"desc"`
	Income          uint64                `ic:"income"`
	Lang            string                `ic:"lang"`
	Last24subcriber idl.Nat               `ic:"last24subcriber"`
	Memory          idl.Nat               `ic:"memory"`
	Name            string                `ic:"name"`
	Owner           principal.Principal   `ic:"owner"`
	Payee           *[]byte               `ic:"payee,omitempty"`
	Permission      PermissionType        `ic:"permission"`
	Subcriber       idl.Nat               `ic:"subcriber"`
	SubcriberNew    idl.Nat               `ic:"subcriber_new"`
	Subcribers      []QuerySubcriber      `ic:"subcribers"`
	Subprices       []SubcribePrice       `ic:"subprices"`
	Twitter         string                `ic:"twitter"`
	Url             string                `ic:"url"`
	Writers         []principal.Principal `ic:"writers"`
}

type PlanetBase struct {
	Article    idl.Nat               `ic:"article"`
	Avatar     string                `ic:"avatar"`
	Canindex   bool                  `ic:"canindex"`
	Canister   principal.Principal   `ic:"canister"`
	Categorys  []QueryCategory       `ic:"categorys"`
	Cover      string                `ic:"cover"`
	Created    idl.Int               `ic:"created"`
	Desc       string                `ic:"desc"`
	Income     uint64                `ic:"income"`
	Lang       string                `ic:"lang"`
	Name       string                `ic:"name"`
	Owner      principal.Principal   `ic:"owner"`
	Subcriber  idl.Nat               `ic:"subcriber"`
	Subcribers []QuerySubcriber      `ic:"subcribers"`
	Subprices  []SubcribePrice       `ic:"subprices"`
	Twitter    string                `ic:"twitter"`
	Url        string                `ic:"url"`
	Writers    []principal.Principal `ic:"writers"`
}

type PermissionType struct {
	NONE   *idl.Null `ic:"NONE,variant"`
	OWNER  *idl.Null `ic:"OWNER,variant"`
	WRITER *idl.Null `ic:"WRITER,variant"`
}

type PayType struct {
	Award  *AwardPrice    `ic:"Award,variant"`
	Price  *SubcribePrice `ic:"Price,variant"`
	Verify *bool          `ic:"Verify,variant"`
}

type PayStatus struct {
	Cancel    *idl.Null `ic:"Cancel,variant"`
	Paid      *idl.Null `ic:"Paid,variant"`
	Refunded  *idl.Null `ic:"Refunded,variant"`
	Timeout   *idl.Null `ic:"Timeout,variant"`
	Unpaid    *idl.Null `ic:"Unpaid,variant"`
	Verifying *idl.Null `ic:"Verifying,variant"`
}

type PayResp struct {
	Err *string `ic:"Err,variant"`
	Ok  *struct {
		Invoice PayInfo `ic:"invoice"`
	} `ic:"Ok,variant"`
}

type PayInfo struct {
	Amount      uint64  `ic:"amount"`
	CreatedTime idl.Int `ic:"createdTime"`
	Id          uint64  `ic:"id"`
	Paytype     PayType `ic:"paytype"`
	To          []byte  `ic:"to"`
	Token       string  `ic:"token"`
}

type OpResult struct {
	Err *string `ic:"Err,variant"`
	Ok  *struct {
		Data string `ic:"data"`
	} `ic:"Ok,variant"`
}

type ICRCTransferArgs struct {
	Amount uint64  `ic:"amount"`
	Memo   *[]byte `ic:"memo,omitempty"`
	To     Account `ic:"to"`
	Token  string  `ic:"token"`
}

type CommentStatus struct {
	Invisible *idl.Null `ic:"Invisible,variant"`
	Visible   *idl.Null `ic:"Visible,variant"`
}

type CommentArgs struct {
	Aid     string `ic:"aid"`
	Content string `ic:"content"`
}

type BlackUser struct {
	Created idl.Int             `ic:"created"`
	Pid     principal.Principal `ic:"pid"`
}

type AwardPrice struct {
	Aid string `ic:"aid"`
}

type ArticleType struct {
	Article *idl.Null `ic:"Article,variant"`
	Audio   *idl.Null `ic:"Audio,variant"`
	Photos  *idl.Null `ic:"Photos,variant"`
	Shortle *idl.Null `ic:"Shortle,variant"`
	Video   *idl.Null `ic:"Video,variant"`
}

type ArticleStatus struct {
	Delete   *idl.Null `ic:"Delete,variant"`
	Draft    *idl.Null `ic:"Draft,variant"`
	Private  *idl.Null `ic:"Private,variant"`
	Public   *idl.Null `ic:"Public,variant"`
	Subcribe *idl.Null `ic:"Subcribe,variant"`
}

type ArticleStat struct {
	DraftCount    idl.Nat `ic:"draftCount"`
	PrivateCount  idl.Nat `ic:"privateCount"`
	PublicCount   idl.Nat `ic:"publicCount"`
	SubcribeCount idl.Nat `ic:"subcribeCount"`
	Total         idl.Nat `ic:"total"`
}

type ArticleArgs struct {
	Abstract     string        `ic:"abstract"`
	AllowComment bool          `ic:"allowComment"`
	Atype        ArticleType   `ic:"atype"`
	Cate         idl.Nat       `ic:"cate"`
	Content      string        `ic:"content"`
	Fromurl      string        `ic:"fromurl"`
	Id           string        `ic:"id"`
	Original     bool          `ic:"original"`
	Status       ArticleStatus `ic:"status"`
	Subcate      idl.Nat       `ic:"subcate"`
	Tags         []string      `ic:"tags"`
	Thumb        string        `ic:"thumb"`
	Title        string        `ic:"title"`
}

type AccountIdentifier = []byte

type Account struct {
	Owner      principal.Principal `ic:"owner"`
	Subaccount *[]byte             `ic:"subaccount,omitempty"`
}

// Agent is a client for the "planet" canister.
type Agent struct {
	a          *agent.Agent
	canisterId principal.Principal
}

// NewAgent creates a new agent for the "planet" canister.
func NewAgent(canisterId principal.Principal, config agent.Config) (*Agent, error) {
	a, err := agent.New(config)
	if err != nil {
		return nil, err
	}
	return &Agent{
		a:          a,
		canisterId: canisterId,
	}, nil
}

// AddArticle calls the "addArticle" method on the "planet" canister.
func (a Agent) AddArticle(arg0 ArticleArgs) (*OpResult, error) {
	var r0 OpResult
	if err := a.a.Call(
		a.canisterId,
		"addArticle",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// AddBlackUser calls the "addBlackUser" method on the "planet" canister.
func (a Agent) AddBlackUser(arg0 principal.Principal) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"addBlackUser",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// AddComment calls the "addComment" method on the "planet" canister.
func (a Agent) AddComment(arg0 CommentArgs) (*OpResult, error) {
	var r0 OpResult
	if err := a.a.Call(
		a.canisterId,
		"addComment",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// AdminArticle calls the "adminArticle" method on the "planet" canister.
func (a Agent) AdminArticle(arg0 string) (*QueryDetailResp, error) {
	var r0 QueryDetailResp
	if err := a.a.Query(
		a.canisterId,
		"adminArticle",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// AdminArticles calls the "adminArticles" method on the "planet" canister.
func (a Agent) AdminArticles(arg0 QueryArticleReq) (*QueryArticleResp, error) {
	var r0 QueryArticleResp
	if err := a.a.Query(
		a.canisterId,
		"adminArticles",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// AdminBlackUsers calls the "adminBlackUsers" method on the "planet" canister.
func (a Agent) AdminBlackUsers(arg0 QueryCommonReq) (*QueryBlackUserResp, error) {
	var r0 QueryBlackUserResp
	if err := a.a.Query(
		a.canisterId,
		"adminBlackUsers",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// AdminComments calls the "adminComments" method on the "planet" canister.
func (a Agent) AdminComments(arg0 QueryCommentReq) (*QueryCommentResp, error) {
	var r0 QueryCommentResp
	if err := a.a.Query(
		a.canisterId,
		"adminComments",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// AdminReplyComment calls the "adminReplyComment" method on the "planet" canister.
func (a Agent) AdminReplyComment(arg0 idl.Nat, arg1 CommentArgs) (*OpResult, error) {
	var r0 OpResult
	if err := a.a.Call(
		a.canisterId,
		"adminReplyComment",
		[]any{arg0, arg1},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// AdminShowComment calls the "adminShowComment" method on the "planet" canister.
func (a Agent) AdminShowComment(arg0 idl.Nat, arg1 bool) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"adminShowComment",
		[]any{arg0, arg1},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// AdminSubcribers calls the "adminSubcribers" method on the "planet" canister.
func (a Agent) AdminSubcribers(arg0 QueryCommonReq) (*QuerySubcriberResp, error) {
	var r0 QuerySubcriberResp
	if err := a.a.Query(
		a.canisterId,
		"adminSubcribers",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// CancelThumbsup calls the "cancelThumbsup" method on the "planet" canister.
func (a Agent) CancelThumbsup(arg0 string, arg1 *idl.Nat) (*OpResult, error) {
	var r0 OpResult
	if err := a.a.Call(
		a.canisterId,
		"cancelThumbsup",
		[]any{arg0, arg1},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// CanisterAccount calls the "canisterAccount" method on the "planet" canister.
func (a Agent) CanisterAccount() (*AccountIdentifier, error) {
	var r0 AccountIdentifier
	if err := a.a.Query(
		a.canisterId,
		"canisterAccount",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// CanisterBalance calls the "canisterBalance" method on the "planet" canister.
func (a Agent) CanisterBalance() (*Tokens, error) {
	var r0 Tokens
	if err := a.a.Call(
		a.canisterId,
		"canisterBalance",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// CanisterMemory calls the "canisterMemory" method on the "planet" canister.
func (a Agent) CanisterMemory() (*idl.Nat, error) {
	var r0 idl.Nat
	if err := a.a.Query(
		a.canisterId,
		"canisterMemory",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// CanisterTransfer calls the "canisterTransfer" method on the "planet" canister.
func (a Agent) CanisterTransfer(arg0 TransferArgs) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"canisterTransfer",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ConfirmAward calls the "confirmAward" method on the "planet" canister.
func (a Agent) ConfirmAward(arg0 uint64) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"confirmAward",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Copyright calls the "copyright" method on the "planet" canister.
func (a Agent) Copyright(arg0 string) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"copyright",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// DeleteArticle calls the "deleteArticle" method on the "planet" canister.
func (a Agent) DeleteArticle(arg0 string) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"deleteArticle",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetPlanetBase calls the "getPlanetBase" method on the "planet" canister.
func (a Agent) GetPlanetBase() (*PlanetBase, error) {
	var r0 PlanetBase
	if err := a.a.Query(
		a.canisterId,
		"getPlanetBase",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetPlanetInfo calls the "getPlanetInfo" method on the "planet" canister.
func (a Agent) GetPlanetInfo() (*PlanetInfo, error) {
	var r0 PlanetInfo
	if err := a.a.Query(
		a.canisterId,
		"getPlanetInfo",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetRecoverOwner calls the "getRecoverOwner" method on the "planet" canister.
func (a Agent) GetRecoverOwner() (**principal.Principal, error) {
	var r0 *principal.Principal
	if err := a.a.Query(
		a.canisterId,
		"getRecoverOwner",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetSelfSubcriber calls the "getSelfSubcriber" method on the "planet" canister.
func (a Agent) GetSelfSubcriber() (*QuerySelfSubscriber, error) {
	var r0 QuerySelfSubscriber
	if err := a.a.Query(
		a.canisterId,
		"getSelfSubcriber",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetVersion calls the "get_version" method on the "planet" canister.
func (a Agent) GetVersion() (*string, error) {
	var r0 string
	if err := a.a.Query(
		a.canisterId,
		"get_version",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Icrc1Transfer calls the "icrc1_transfer" method on the "planet" canister.
func (a Agent) Icrc1Transfer(arg0 ICRCTransferArgs) (*Result, error) {
	var r0 Result
	if err := a.a.Call(
		a.canisterId,
		"icrc1_transfer",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// IsSubscriber calls the "isSubscriber" method on the "planet" canister.
func (a Agent) IsSubscriber(arg0 principal.Principal) (*QueryCommonSubscriber, error) {
	var r0 QueryCommonSubscriber
	if err := a.a.Query(
		a.canisterId,
		"isSubscriber",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// PreAward calls the "preAward" method on the "planet" canister.
func (a Agent) PreAward(arg0 string, arg1 string, arg2 string) (*PayResp, error) {
	var r0 PayResp
	if err := a.a.Call(
		a.canisterId,
		"preAward",
		[]any{arg0, arg1, arg2},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// PreSubscribe calls the "preSubscribe" method on the "planet" canister.
func (a Agent) PreSubscribe(arg0 string, arg1 SubcribePrice) (*PayResp, error) {
	var r0 PayResp
	if err := a.a.Call(
		a.canisterId,
		"preSubscribe",
		[]any{arg0, arg1},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// QueryArticle calls the "queryArticle" method on the "planet" canister.
func (a Agent) QueryArticle(arg0 string) (*QueryDetailResp, error) {
	var r0 QueryDetailResp
	if err := a.a.Query(
		a.canisterId,
		"queryArticle",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// QueryArticles calls the "queryArticles" method on the "planet" canister.
func (a Agent) QueryArticles(arg0 QueryArticleReq) (*QueryArticleResp, error) {
	var r0 QueryArticleResp
	if err := a.a.Query(
		a.canisterId,
		"queryArticles",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// QueryAwards calls the "queryAwards" method on the "planet" canister.
func (a Agent) QueryAwards(arg0 QueryAwardReq) (*QueryAwardResp, error) {
	var r0 QueryAwardResp
	if err := a.a.Query(
		a.canisterId,
		"queryAwards",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// QueryComments calls the "queryComments" method on the "planet" canister.
func (a Agent) QueryComments(arg0 QueryCommentReq) (*QueryCommentResp, error) {
	var r0 QueryCommentResp
	if err := a.a.Query(
		a.canisterId,
		"queryComments",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// QueryOrders calls the "queryOrders" method on the "planet" canister.
func (a Agent) QueryOrders(arg0 QueryCommonReq) (*QueryOrderResp, error) {
	var r0 QueryOrderResp
	if err := a.a.Query(
		a.canisterId,
		"queryOrders",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// RefundOrder calls the "refundOrder" method on the "planet" canister.
func (a Agent) RefundOrder(arg0 uint64, arg1 []byte) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"refundOrder",
		[]any{arg0, arg1},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// RemoveBlackUser calls the "removeBlackUser" method on the "planet" canister.
func (a Agent) RemoveBlackUser(arg0 principal.Principal) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"removeBlackUser",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ResetArticleCommentNew calls the "resetArticleCommentNew" method on the "planet" canister.
func (a Agent) ResetArticleCommentNew(arg0 string) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"resetArticleCommentNew",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ResetSubscriberNew calls the "resetSubscriberNew" method on the "planet" canister.
func (a Agent) ResetSubscriberNew() (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"resetSubscriberNew",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetAvatar calls the "setAvatar" method on the "planet" canister.
func (a Agent) SetAvatar(arg0 string) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setAvatar",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetCanIndex calls the "setCanIndex" method on the "planet" canister.
func (a Agent) SetCanIndex(arg0 bool) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setCanIndex",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetCategorys calls the "setCategorys" method on the "planet" canister.
func (a Agent) SetCategorys(arg0 []QueryCategory) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setCategorys",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetCover calls the "setCover" method on the "planet" canister.
func (a Agent) SetCover(arg0 string) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setCover",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetCustomUrl calls the "setCustomUrl" method on the "planet" canister.
func (a Agent) SetCustomUrl(arg0 string) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setCustomUrl",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetDesc calls the "setDesc" method on the "planet" canister.
func (a Agent) SetDesc(arg0 string) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setDesc",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetLang calls the "setLang" method on the "planet" canister.
func (a Agent) SetLang(arg0 string) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setLang",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetName calls the "setName" method on the "planet" canister.
func (a Agent) SetName(arg0 string) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setName",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetOwner calls the "setOwner" method on the "planet" canister.
func (a Agent) SetOwner(arg0 principal.Principal) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setOwner",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetRecoverOwner calls the "setRecoverOwner" method on the "planet" canister.
func (a Agent) SetRecoverOwner(arg0 principal.Principal) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setRecoverOwner",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetSubPrices calls the "setSubPrices" method on the "planet" canister.
func (a Agent) SetSubPrices(arg0 []SubcribePrice) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setSubPrices",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetTwitter calls the "setTwitter" method on the "planet" canister.
func (a Agent) SetTwitter(arg0 string) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setTwitter",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetWriters calls the "setWriters" method on the "planet" canister.
func (a Agent) SetWriters(arg0 []principal.Principal) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"setWriters",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Subscribe calls the "subscribe" method on the "planet" canister.
func (a Agent) Subscribe(arg0 uint64) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"subscribe",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Thumbsup calls the "thumbsup" method on the "planet" canister.
func (a Agent) Thumbsup(arg0 string, arg1 *idl.Nat) (*OpResult, error) {
	var r0 OpResult
	if err := a.a.Call(
		a.canisterId,
		"thumbsup",
		[]any{arg0, arg1},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// TopedArticle calls the "topedArticle" method on the "planet" canister.
func (a Agent) TopedArticle(arg0 string, arg1 bool) (*OpResult, error) {
	var r0 OpResult
	if err := a.a.Call(
		a.canisterId,
		"topedArticle",
		[]any{arg0, arg1},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// TransferSubscribe calls the "transferSubscribe" method on the "planet" canister.
func (a Agent) TransferSubscribe(arg0 principal.Principal) (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"transferSubscribe",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Unsubscribe calls the "unsubscribe" method on the "planet" canister.
func (a Agent) Unsubscribe() (*bool, error) {
	var r0 bool
	if err := a.a.Call(
		a.canisterId,
		"unsubscribe",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// UpdateArticle calls the "updateArticle" method on the "planet" canister.
func (a Agent) UpdateArticle(arg0 ArticleArgs) (*OpResult, error) {
	var r0 OpResult
	if err := a.a.Call(
		a.canisterId,
		"updateArticle",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// VerifyOwner calls the "verifyOwner" method on the "planet" canister.
func (a Agent) VerifyOwner(arg0 *principal.Principal) (*bool, error) {
	var r0 bool
	if err := a.a.Query(
		a.canisterId,
		"verifyOwner",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// VerifyOwnerWriter calls the "verifyOwnerWriter" method on the "planet" canister.
func (a Agent) VerifyOwnerWriter(arg0 *principal.Principal) (*bool, error) {
	var r0 bool
	if err := a.a.Query(
		a.canisterId,
		"verifyOwnerWriter",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// VerifySubcriber calls the "verifySubcriber" method on the "planet" canister.
func (a Agent) VerifySubcriber(arg0 *principal.Principal) (*bool, error) {
	var r0 bool
	if err := a.a.Query(
		a.canisterId,
		"verifySubcriber",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// VerifyWriter calls the "verifyWriter" method on the "planet" canister.
func (a Agent) VerifyWriter(arg0 *principal.Principal) (*bool, error) {
	var r0 bool
	if err := a.a.Query(
		a.canisterId,
		"verifyWriter",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// WalletBalance calls the "wallet_balance" method on the "planet" canister.
func (a Agent) WalletBalance() (*idl.Nat, error) {
	var r0 idl.Nat
	if err := a.a.Query(
		a.canisterId,
		"wallet_balance",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// WalletReceive calls the "wallet_receive" method on the "planet" canister.
func (a Agent) WalletReceive() (*struct {
	Accepted uint64 `ic:"accepted"`
}, error) {
	var r0 struct {
		Accepted uint64 `ic:"accepted"`
	}
	if err := a.a.Call(
		a.canisterId,
		"wallet_receive",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}
